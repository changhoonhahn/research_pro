;+
; NAME:
;   WRITE_ISEDFIT_PARAMFILE()
;
; PURPOSE:
;   Build the global parameter file for iSEDfit.
;
; INPUTS: 
;   isedfit_dir - full path specifying where all the I/O iSEDfit files
;     should be written, including this parameter file (default
;     PWD=present working directory)   
;   prefix - prefix to assign to output files generated by iSEDfit,
;     including this parameter file (e.g., 'mysample')
;   filterlist - string array list of filters (K-correct compatible
;     .par files) [NFILT]
;
;   zminmax - two-element array specifying the minimum and maximum
;     redshift range to consider in the calculations; ZMINMAX should
;     span the range of redshifts of the sample, as the code will not
;     extrapolate (ignored if USE_REDSHIFT is used)
;   zbin - redshift bin spacing between ZMINMAX[0] and ZMINMAX[1]
;     (you probably don't want the spacing to be much bigger
;     than 0.1 in Delta-z); parameter ignored if /ZLOG
;   zlog - set this keyword to distribute NZZ redshifts
;     logarithmically in the range (ZMINMAX[0],ZMINMAX[1]) [0=no,
;     1=yes] (default 0; ignored if USE_REDSHIFT is used); this is
;     only really necessary if your sample extends all the way down to
;     z~0 (e.g., if z ranges between 1E-3 and 0.1 you'll want
;     to use /ZLOG) 
;   nzz - number of *logarithmic* redshifts in the range
;     (ZMINMAX[0],ZMINMAX[1]); only used if /ZLOG
;   use_redshift - in lieu of ZMINMAX and ZBIN (or ZLOG and NZZ), the
;     user can instead pass the desired model redshift array directly
;     using this parameter; this is useful if you have a small number
;     of objects in the sample spanning a wide range of redshifts (see
;     COMMENTS!)
;
; OPTIONAL INPUTS: 
;   h100 - Hubble constant relative to 100 km/s/Mpc (default 0.7)
;   omega0 - matter density (default 0.3)
;   omegal - vacuum energy density (default 0.7)
;
;   spsmodels - stellar population synthesis models to use (default
;     'fsps_v2.4_miles'); see the documentation for an up-to-date list
;     of available models
;   imf - initial mass function to adopt (default 'chab'=Chabrier);
;     which IMF is available depends on which SPSMODELS are adopted;
;     see the documentation for an up-to-date list of available IMFs
;   redcurve - reddening curve (default 'charlot'=Charlot & Fall); see
;     the documentation for an up-to-date list of available
;     reddening/attenuation curves  
;   igm - include IGM attenuation? [0=no, 1=yes] (default 1); 
;
;   sfhgrid - unique star formation history (SFHgrid) number (default 1)
;   nmodel - number of Monte Carlo realizations of the model
;     parameters (default 10,000)
;   ndraw - random number of random points to draw from the posterior
;     (default 2000)
;   nminphot - require at least NMINPHOT bandpasses with well-measured
;     photometry (i.e., excluding upper limits) in order to fit
;     (default 3)
;   modelchunksize - split the Monte Carlo model grids into
;     MODELCHUNKSIZE sized chunks (see ISEDFIT_MONTEGRIDS for details;
;     default is 5000L) 
;   galchunksize - split the sample into GALCHUNKSIZE sized chunks,
;     which is necessary if the sample is very large (default 2500) 
;
;   age - minimum and maximum galaxy age (default [0.1,13]) [Gyr] 
;   tau - minimum and maximum tau value (default [0.01,1.0]) [Gyr or
;     Gyr^-1 if /ONEOVERTAU]
;   Zmetal - minimum and maximum stellar metallicity (default
;     [0.004,0.04]) 
;   AV - Gamma distribution mean and width (default [0.35,2.0]) or
;     minimum and maximum V-band extinction/attenuation if /FLATAV
;     [mag] 
;   mu - Gamma distribution mean and width (default [0.1,4.0]) or
;     minimum and maximum values if /FLATMU
; 
;   pburst - cumulative probability of a burst occurring during each
;     INTERVAL_PBURST time interval between TBURST[0] and TBURST[1]
;     (default 0.0); note that all the subsequent burst parameters are
;     ignored if PBURST<=0!
;   interval_pburst - time interval during which a burst can occur
;     with probability PBURST (default 2.0 Gyr) 
;   tburst - minimum and maximum time for a burst to occur (default
;     [0.1,13]) (Gyr)
;   fburst - minimum and maximum burst mass fraction (default
;     [0.03,4.0]) 
;   dtburst - minimum and maximum burst duration (default [0.03,0.3])
;     (Gyr) 
;   trunctau - minimum and maximum truncation timescale (default
;     [-1.0,-1.0], i.e., no truncated bursts)
;   fractrunc - fraction of models with truncated bursts (default 0) 
; 
;   oiiihb - if /NEBULAR then include draw the [OIII]/H-beta emission
;     line ratios from a uniform distribution
;  
;   bursttype - type of burst (see iSEDfit documentation)
;     0 - step function
;     1 - Gaussian (default)
;     2 - step function with exponential wings
;
; KEYWORD PARAMETERS:
;   nebular - include nebular emission lines
;   oneovertau - interpret TAU to be 1/TAU (i.e., "gamma" in the
;     parlance of Salim+07); in other words, we draw uniformly from
;     the range [1/max(TAU),1/min(TAU)]
;   delayed - use a delayed "tau" model (see Appendix A of
;     J. Moustakas et al. 2013) 
;   flatAV - draw A(V) from a uniform/flat distribution rather than
;     the default Gamma distribution
;   flatmu - draw mu from a uniform/flat distribution rather than the
;     default Gamma distribution 
;   flatfburst - draw FBURST from a uniform/flat distribution rather
;     than the default uniform *logarithmic* distribution 
;   flatdtburst - draw DTBURST from a uniform/flat distribution rather 
;     than the default uniform *logarithmic* distribution 
; 
;   append - append a new set of parameters to an existing parameter file
;   help - print the documentation to STDOUT
;   clobber - overwrite an existing parameter file
; 
; OUTPUTS: 
;   This code writes a parameter file called
;   ISEDFIT_DIR+PREFIX+'_PARAMETER.PAR' and will also optionally
;   return the PARAMS structure.  
; 
; COMMENTS:
;   Note that USE_REDSHIFT *must* be monotonic (increasing or
;   decreasing), otherwise the interpolations fail. 
;
;   If /APPEND then neither the number of elements in the redshift
;   array nor the number of filters can change, otherwise the
;   structures can't be stacked.
;
;   See J. Moustakas et al. (2013, ApJ, 767, 50) for many details. 
;
; MODIFICATION HISTORY:
;   J. Moustakas, 2012 Sep 19, Siena
;   jm13aug05siena - major update and rewrite; all parameters
;     controlling iSEDfit are now specified here
;
; Copyright (C) 2012-2013, John Moustakas
; 
; This program is free software; you can redistribute it and/or modify 
; it under the terms of the GNU General Public License as published by 
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version. 
; 
; This program is distributed in the hope that it will be useful, but 
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details. 
;-

function init_paramfile, filterlist=filterlist, prefix=prefix, $
  use_redshift=use_redshift1
; populate the iSEDfit parameter file with defaults; note that all the
; integers have to be type LONG to avoid issues with the Yanny
; parameter files 

    if n_elements(use_redshift1) eq 0 then use_redshift = 0.0 else $
      use_redshift = float(use_redshift1)
    
    params = {$
; preliminaries
      prefix:        prefix,$
      h100:             0.7,$
      omega0:           0.3,$
      omegal:           0.7,$
; SPS details
      spsmodels: 'fsps_v2.4_miles',$
      imf:           'chab',$
      redcurve:  'calzetti',$
      igm:               1L,$ ; include IGM attenuation? [1=yes, 0=no]
; number of Monte Carlo models
      sfhgrid:          -1L,$
      nmodel:        10000L,$
      ndraw:          2000L,$
      nminphot:          3L,$
      galchunksize:   2500L,$
      modelchunksize: 5000L,$
; model grid parameters; basic SFH priors
      age:       [0.1,13.0],$ ; range of model ages [Gyr]
      tau:       [0.01,1.0],$ ; [Gyr] or [Gyr^-1] if /ONEOVERTAU
      Zmetal:  [0.004,0.04],$ ; metallicity
      AV:        [0.35,2.0],$ ; Gamma-distribution parameters
      mu:           [0.1,4],$ ; Gamma-distribution parameters
; burst priors
      pburst:           0.0,$ ; burst probability 
      interval_pburst:  2.0,$ ; [Gyr]
      tburst:    [0.1,13.0],$ ; range of burst times [Gyr]
      fburst:    [0.03,4.0],$ ; range of burst mass fraction
      dtburst:   [0.03,0.3],$ ; range of burst width [Gyr]
      trunctau: [-1.0,-1.0],$ ; range of truncation timescale [Gyr]
      fractrunc:        0.0,$ ; fraction of models with truncated SFHs
; emission-line priors
      oiiihb:    [-1.0,1.0],$ ; flat distribution
; additional options      
      nebular:           0L,$ ; no emission lines by default
      oneovertau:        0L,$ ; uniform in tau (not 1/tau) by default
      delayed:           0L,$ ; simple tau by default
      flatAV:            0L,$ ; Gamma distribution by default
      flatmu:            0L,$ ; Gamma distribution by default
      flatfburst:        0L,$ ; log-distributed by default
      flatdtburst:       0L,$ ; log-distributed by default
      bursttype:         1L,$ ; Gaussian burst default
; sample-specific parameters
      filterlist: filterlist,$
      zlog:              0L,$ ; zlog?
      nzz:               0L,$
      zbin:             0.0,$
      zminmax:    [0.0,0.0],$
      user_redshift: long(n_elements(use_redshift1) gt 0),$ ; custom redshift?
      use_redshift: float(use_redshift)}
return, params
end    

pro write_isedfit_paramfile, params=params, isedfit_dir=isedfit_dir, $
  prefix=prefix, filterlist=filterlist, zminmax=zminmax, zbin=zbin, nzz=nzz, $
  zlog=zlog, use_redshift=use_redshift, h100=h100, omega0=omega0, omegal=omegal, $
  spsmodels=spsmodels, imf=imf, redcurve=redcurve, igm=igm, sfhgrid=sfhgrid, $
  nmodel=nmodel, ndraw=ndraw, nminphot=nminphot, galchunksize=galchunksize, $
  modelchunksize=modelchunksize, age=age, tau=tau, Zmetal=Zmetal, AV=AV, mu=mu, $
  pburst=pburst, interval_pburst=interval_pburst, tburst=tburst, fburst=fburst, $
  dtburst=dtburst, trunctau=trunctau, fractrunc=fractrunc, oiiihb=oiiihb, $
  nebular=nebular, oneovertau=oneovertau, delayed=delayed, flatAV=flatAV, $
  flatmu=flatmu, flatfburst=flatfburst, flatdtburst=flatdtburst, bursttype=bursttype, $
  append=append, help=help, clobber=clobber

    if keyword_set(help) then begin
       doc_library, 'write_isedfit_paramfile'
       return
    endif
    
; check for the required parameters
    if n_elements(prefix) eq 0 then begin
       splog, 'PREFIX must be specified'
       return
    endif

    if n_elements(isedfit_dir) eq 0 then isedfit_dir = get_pwd()
    isedfit_paramfile = isedfit_dir+'/'+prefix+'_paramfile.par'

    if n_elements(filterlist) eq 0 then begin
       splog, 'FILTERLIST must be specified'
       return
    endif

; initialize the parameter structure    
    params = init_paramfile(filterlist=filterlist,prefix=prefix,$
      use_redshift=use_redshift)

; check the redshift parameters
    if params.user_redshift eq 0 then begin
       if n_elements(zminmax) eq 0 and (n_elements(zbin) eq 0 or n_elements(nzz) eq 0) then begin
          splog, 'Redshift parameters ZMINMAX and ZBIN *or* NZZ must be specified!' 
          return
       endif else begin
          if n_elements(zminmax) ne 2 then message, 'ZMINMAX must be a 2-element array!'
          if im_double(zminmax[0]) gt im_double(zminmax[1]) then $
            message, 'ZMINMAX[0] must be less than ZMINMAX[1]!'
          if keyword_set(zlog) then begin
             if n_elements(nzz) eq 0 then message, 'NZZ must be specified in tandem with /ZLOG'
             if nzz le 0 then message, 'NZZ must be greater than zero!'
             redshift = range(zminmax[0],zminmax[1],nzz,/log)
          endif else begin
             if n_elements(zbin) eq 0 then begin ; use NZZ
                if nzz gt 1 then zbin = (zminmax[1]-zminmax[0])/(nzz-1.0) else zbin = 0.0
             endif else begin   ; use ZBIN
                nzz = ceil((zminmax[1]-zminmax[0])/float(zbin)+1)
                redshift = range(zminmax[0],zminmax[1],nzz)
             endelse
          endelse 
          params.zminmax = zminmax
          params.nzz = nzz
          params.zbin = zbin
          params.zlog = long(keyword_set(zlog))
       endelse 
    endif else begin
; USE_REDSHIFT needs to be monotonic
       if monotonic(use_redshift) eq 0 then begin
          splog, 'USE_REDSHIFT must be a monotonically increasing or decreasing array!'
          return
       endif
       params.nzz = n_elements(use_redshift)
       params.zminmax = minmax(use_redshift)
    endelse

; --------------------
; cosmology    
    if n_elements(h100) ne 0 then params.h100 = h100
    if n_elements(omega0) ne 0 then params.omega0 = omega0
    if n_elements(omegal) ne 0 then params.omegal = omegal

; --------------------
; SPS parameters
    if n_elements(spsmodels) ne 0 then params.spsmodels = spsmodels
    if n_elements(imf) ne 0 then params.imf = imf
    if n_elements(redcurve) ne 0 then params.redcurve = strlowcase(strtrim(redcurve,2))
    if n_elements(igm) ne 0 then params.igm = keyword_set(igm)
    case params.redcurve of
       'none': 
       'calzetti': 
       'charlot': 
       'odonnell': 
       'smc': 
       else: message, 'Reddening curve '+params.redcurve+' not currently supported!'
    endcase

; --------------------
; SFH priors
    if n_elements(nmodel) ne 0 then params.nmodel = nmodel
    if n_elements(ndraw) ne 0 then params.ndraw = ndraw
    if n_elements(nminphot) ne 0 then params.nminphot = nminphot
    if n_elements(galchunksize) ne 0 then params.galchunksize = galchunksize
    if n_elements(modelchunksize) ne 0 then params.modelchunksize = modelchunksize

; basic SFH
    if n_elements(age) ne 0 then begin
       if n_elements(age) ne 2 then message, 'AGE must be a 2-element array!'
       params.age = age
    endif
    if n_elements(tau) ne 0 then begin
       if n_elements(tau) ne 2 then message, 'TAU must be a 2-element array!'
       params.tau = tau
    endif
    if n_elements(Zmetal) ne 0 then begin
       if n_elements(Zmetal) ne 2 then message, 'Zmetal must be a 2-element array!'
       params.Zmetal = Zmetal
    endif
    if n_elements(AV) ne 0 then begin
       if n_elements(AV) ne 2 then message, 'AV must be a 2-element array!'
       params.AV = AV
    endif
    if n_elements(mu) ne 0 then begin
       if n_elements(mu) ne 2 then message, 'MU must be a 2-element array!'
       params.mu = mu
    endif

; some error checking
    if params.redcurve eq 'none' then begin
       if total(params.AV gt 0) ne 0.0 then begin
          splog, 'If REDCURVE=none then AV must be explicitly set to zero!'
          return
       endif
    endif
    
; burst parameters    
    if n_elements(pburst) ne 0 then params.pburst = pburst
    if n_elements(interval_pburst) ne 0 then params.interval_pburst = interval_pburst
    if n_elements(tburst) ne 0 then begin
       if n_elements(tburst) ne 2 then message, 'TBURST must be a 2-element array!'
       params.tburst = tburst
    endif else params.tburst = params.age ; note!
    if n_elements(fburst) ne 0 then begin
       if n_elements(fburst) ne 2 then message, 'FBURST must be a 2-element array!'
       params.fburst = fburst
    endif
    if n_elements(dtburst) ne 0 then begin
       if n_elements(dtburst) ne 2 then message, 'DTBURST must be a 2-element array!'
       params.dtburst = dtburst
    endif
    if n_elements(trunctau) ne 0 then begin
       if n_elements(trunctau) ne 2 then message, 'TRUNCTAU must be a 2-element array!'
       params.trunctau = trunctau
    endif
    if n_elements(fractrunc) ne 0 then params.fractrunc = fractrunc

; nebular emission lines    
    params.nebular = keyword_set(nebular)
    if n_elements(oiiihb) ne 0 then begin
       if n_elements(oiiihb) ne 2 then message, 'OIIIHB must be a 2-element array!'
       params.oiiihb = oiiihb
    endif
    
; additional options
    if keyword_set(oneovertau) then begin
       params.oneovertau = 1
       if min(params.tau) le 0 then message, 'When using /ONEOVERTAU, TAU must be greater than zero!'
    endif
    params.delayed = keyword_set(delayed)
    if params.delayed and params.oneovertau then $
      message, 'DELAYED and ONEOVERTAU may not work well together; choose one!'
    params.flatAV = keyword_set(flatAV)
    params.flatmu = keyword_set(flatmu)
    params.flatfburst = keyword_set(flatfburst)
    params.flatdtburst = keyword_set(flatdtburst)
    if n_elements(bursttype) ne 0 then params.bursttype = bursttype

; overwrite or append?  assign unique SFHGRID numbers
    if keyword_set(append) then begin
       if file_test(isedfit_paramfile) eq 0 then begin
          splog, 'Parameter file '+isedfit_paramfile+' does not exist; unable to APPEND.'
          return
       endif
       splog, 'Appending to '+isedfit_paramfile
       params1 = yanny_readone(isedfit_paramfile)
       if n_elements(sfhgrid) eq 0 then params.sfhgrid = max(params1.sfhgrid)+1 else $
         params.sfhgrid = sfhgrid
       params = [params1,params]
; we need NZZ to be the same because of the simplistic code in
; READ_ISEDFIT_PARAMFILE
       if total(params.nzz eq params[0].nzz) ne n_elements(params) then begin
          splog, 'NZZ must be the same for each SFHGRID in '+isedfit_paramfile
          return
       endif
    endif else begin
       if n_elements(sfhgrid) eq 0 then params.sfhgrid = 1 else $
         params.sfhgrid = sfhgrid
    endelse

    uu = uniq(params.sfhgrid,sort(params.sfhgrid))
    if n_elements(uu) ne n_elements(params) then message, $
      'SFHGRID numbers must be unique'

    if im_file_test(isedfit_paramfile,clobber=keyword_set(clobber) or $
      keyword_set(append)) then return

; write out
    hdr = ['# iSEDfit parameter file generated by WRITE_ISEDFIT_PARAMFILE on '+im_today()]
    splog, 'Writing '+isedfit_paramfile
    yanny_write, isedfit_paramfile, ptr_new(params), $
      stnames='ISEDFITPARAMS', hdr=hdr

return
end
